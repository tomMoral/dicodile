
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_mandrill.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_mandrill.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_mandrill.py:

DiCoDiLe on the Mandrill image
==============================

This example illlustrates reconstruction of `Mandrill image
<http://sipi.usc.edu/database/download.php?vol=misc&img=4.2.03>`_
using DiCoDiLe algorithm with default soft_lock value "border" and 9
workers.

.. GENERATED FROM PYTHON SOURCE LINES 10-23

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    from dicodile.data.images import fetch_mandrill

    from dicodile.utils.dictionary import init_dictionary
    from dicodile.utils.viz import display_dictionaries
    from dicodile.utils.csc import reconstruct

    from dicodile import dicodile









.. GENERATED FROM PYTHON SOURCE LINES 24-25

We will first download the Mandrill image.

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default


    X = fetch_mandrill()

    plt.axis('off')
    plt.imshow(X.swapaxes(0, 2))





.. image-sg:: /auto_examples/images/sphx_glr_plot_mandrill_001.png
   :alt: plot mandrill
   :srcset: /auto_examples/images/sphx_glr_plot_mandrill_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading data from https://sipi.usc.edu/database/download.php?vol=misc&img=4.2.03 (1 byte)

    file_sizes:   0%|                                    | 0.00/1.00 [00:00<?, ?B/s]    file_sizes: 213kB [00:00, 2.06MB/s]                                                 file_sizes: 787kB [00:00, 5.83MB/s]
    Successfully downloaded file to /github/home/data/dicodile/images/standard_images/mandrill_color.tif

    <matplotlib.image.AxesImage object at 0x7fbec5384f10>



.. GENERATED FROM PYTHON SOURCE LINES 33-35

We will create a random dictionary of **K = 25** patches of size **8x8**
from the original Mandrill image to be used for sparse coding.

.. GENERATED FROM PYTHON SOURCE LINES 35-44

.. code-block:: default


    # set dictionary size
    n_atoms = 25

    # set individual atom (patch) size
    atom_support = (8, 8)

    D_init = init_dictionary(X, n_atoms, atom_support, random_state=60)








.. GENERATED FROM PYTHON SOURCE LINES 45-46

We are going to run `dicodile` with **9** workers on **3x3** grids.

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default


    # number of iterations for dicodile
    n_iter = 3

    # number of iterations for csc (dicodile_z)
    max_iter = 10000

    # number of splits along each dimension
    w_world = 3

    # number of workers
    n_workers = w_world * w_world








.. GENERATED FROM PYTHON SOURCE LINES 60-61

Run `dicodile`.

.. GENERATED FROM PYTHON SOURCE LINES 61-70

.. code-block:: default


    D_hat, z_hat, pobj, times = dicodile(X, D_init, n_iter=n_iter,
                                         n_workers=n_workers,
                                         dicod_kwargs={"max_iter": max_iter},
                                         verbose=6)


    print("[DICOD] final cost : {}".format(pobj))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [DEBUG:DICODILE] Lambda_max = 11.274413430904202
    Started 9 workers in 4.72s
    [INFO:DICODILE] - CD iterations 0 / 3 (0s)
    [DEBUG:DICODILE] lambda = 1.127e+00
    [INFO:DICOD-9] converged in 427.016s (292.412s) with 9950524 iterations (1084890 updates).
    [DEBUG:DICODILE] Objective (z) : 3.272e+04 (429s)
    [PROGRESS:Update D] 1s -   1.00% iterations (3.219e-04)    [PROGRESS:Update D] 2s -   2.00% iterations (1.588e-04)    [PROGRESS:Update D] 2s -   3.00% iterations (7.920e-05)    [PROGRESS:Update D] 2s -   4.00% iterations (7.920e-05)    [PROGRESS:Update D] 2s -   5.00% iterations (7.920e-05)    [PROGRESS:Update D] 2s -   6.00% iterations (7.920e-05)    [PROGRESS:Update D] 2s -   7.00% iterations (7.920e-05)    [PROGRESS:Update D] 3s -   8.00% iterations (7.920e-05)    [PROGRESS:Update D] 3s -   9.00% iterations (7.920e-05)    [PROGRESS:Update D] 3s -  10.00% iterations (7.920e-05)    [PROGRESS:Update D] 3s -  11.00% iterations (7.920e-05)    [PROGRESS:Update D] 3s -  12.00% iterations (7.920e-05)    [PROGRESS:Update D] 3s -  13.00% iterations (7.920e-05)    [PROGRESS:Update D] 3s -  14.00% iterations (7.920e-05)    [PROGRESS:Update D] 4s -  15.00% iterations (7.920e-05)    [PROGRESS:Update D] 4s -  16.00% iterations (7.920e-05)    [PROGRESS:Update D] 4s -  17.00% iterations (7.920e-05)    [PROGRESS:Update D] 4s -  18.00% iterations (7.920e-05)    [PROGRESS:Update D] 4s -  19.00% iterations (7.920e-05)    [PROGRESS:Update D] 4s -  20.00% iterations (7.920e-05)    [PROGRESS:Update D] 5s -  21.00% iterations (7.920e-05)    [PROGRESS:Update D] 5s -  22.00% iterations (7.920e-05)    [PROGRESS:Update D] 5s -  23.00% iterations (7.920e-05)    [PROGRESS:Update D] 5s -  24.00% iterations (7.920e-05)    [PROGRESS:Update D] 5s -  25.00% iterations (7.920e-05)    [PROGRESS:Update D] 5s -  26.00% iterations (7.920e-05)    [PROGRESS:Update D] 5s -  27.00% iterations (7.920e-05)    [PROGRESS:Update D] 6s -  28.00% iterations (7.920e-05)    [PROGRESS:Update D] 6s -  29.00% iterations (7.920e-05)    [PROGRESS:Update D] 6s -  30.00% iterations (7.920e-05)    [PROGRESS:Update D] 6s -  31.00% iterations (7.920e-05)    [PROGRESS:Update D] 6s -  32.00% iterations (7.920e-05)    [PROGRESS:Update D] 6s -  33.00% iterations (7.920e-05)    [PROGRESS:Update D] 7s -  34.00% iterations (7.920e-05)    [PROGRESS:Update D] 7s -  35.00% iterations (7.920e-05)    [PROGRESS:Update D] 7s -  36.00% iterations (7.920e-05)    [PROGRESS:Update D] 7s -  37.00% iterations (7.920e-05)    [PROGRESS:Update D] 7s -  38.00% iterations (7.920e-05)    [PROGRESS:Update D] 7s -  39.00% iterations (7.920e-05)    [PROGRESS:Update D] 7s -  40.00% iterations (7.920e-05)    [PROGRESS:Update D] 7s -  41.00% iterations (7.920e-05)    [PROGRESS:Update D] 8s -  42.00% iterations (7.920e-05)    [PROGRESS:Update D] 8s -  43.00% iterations (7.920e-05)    [PROGRESS:Update D] 8s -  44.00% iterations (7.920e-05)    [PROGRESS:Update D] 8s -  45.00% iterations (7.920e-05)    [PROGRESS:Update D] 8s -  46.00% iterations (7.920e-05)    [PROGRESS:Update D] 8s -  47.00% iterations (7.920e-05)    [PROGRESS:Update D] 8s -  48.00% iterations (7.920e-05)    [PROGRESS:Update D] 9s -  49.00% iterations (8.369e-06)    [INFO:Update D]: 50 iterations
    [DEBUG:DICODILE] Objective (d) : 3.257e+04  (17s)
    [INFO:DICODILE] - CD iterations 1 / 3 (448s)
    [DEBUG:DICODILE] lambda = 1.127e+00
    [INFO:DICOD-9] converged in 117.108s (87.548s) with 2926179 iterations (309337 updates).
    [DEBUG:DICODILE] Objective (z) : 3.250e+04 (131s)
    [PROGRESS:Update D] 1s -   1.00% iterations (1.290e-03)    [PROGRESS:Update D] 1s -   2.00% iterations (1.360e-04)    [PROGRESS:Update D] 2s -   3.00% iterations (1.360e-04)    [PROGRESS:Update D] 2s -   4.00% iterations (1.360e-04)    [PROGRESS:Update D] 2s -   5.00% iterations (1.360e-04)    [PROGRESS:Update D] 2s -   6.00% iterations (1.360e-04)    [PROGRESS:Update D] 2s -   7.00% iterations (1.360e-04)    [PROGRESS:Update D] 2s -   8.00% iterations (1.360e-04)    [PROGRESS:Update D] 3s -   9.00% iterations (1.360e-04)    [PROGRESS:Update D] 3s -  10.00% iterations (1.360e-04)    [PROGRESS:Update D] 3s -  11.00% iterations (1.360e-04)    [PROGRESS:Update D] 3s -  12.00% iterations (1.360e-04)    [PROGRESS:Update D] 3s -  13.00% iterations (1.360e-04)    [PROGRESS:Update D] 3s -  14.00% iterations (1.360e-04)    [PROGRESS:Update D] 3s -  15.00% iterations (1.360e-04)    [PROGRESS:Update D] 3s -  16.00% iterations (1.360e-04)    [PROGRESS:Update D] 4s -  17.00% iterations (1.360e-04)    [PROGRESS:Update D] 4s -  18.00% iterations (1.360e-04)    [PROGRESS:Update D] 4s -  19.00% iterations (1.360e-04)    [PROGRESS:Update D] 4s -  20.00% iterations (1.360e-04)    [PROGRESS:Update D] 4s -  21.00% iterations (1.360e-04)    [PROGRESS:Update D] 4s -  22.00% iterations (1.360e-04)    [PROGRESS:Update D] 4s -  23.00% iterations (6.801e-05)    [PROGRESS:Update D] 5s -  24.00% iterations (3.401e-05)    [INFO:Update D]: 25 iterations
    [DEBUG:DICODILE] Objective (d) : 3.248e+04  (13s)
    [INFO:DICODILE] - CD iterations 2 / 3 (594s)
    [DEBUG:DICODILE] lambda = 1.127e+00
    [INFO:DICOD-9] converged in 70.968s (52.450s) with 1540520 iterations (195483 updates).
    [DEBUG:DICODILE] Objective (z) : 3.246e+04 (85s)
    [PROGRESS:Update D] 1s -   1.00% iterations (6.449e-04)    [PROGRESS:Update D] 1s -   2.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -   3.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -   4.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -   5.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -   6.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -   7.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -   8.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -   9.00% iterations (1.361e-04)    [PROGRESS:Update D] 2s -  10.00% iterations (1.361e-04)    [PROGRESS:Update D] 3s -  11.00% iterations (1.361e-04)    [PROGRESS:Update D] 3s -  12.00% iterations (1.361e-04)    [PROGRESS:Update D] 3s -  13.00% iterations (1.361e-04)    [PROGRESS:Update D] 3s -  14.00% iterations (1.361e-04)    [PROGRESS:Update D] 3s -  15.00% iterations (1.361e-04)    [PROGRESS:Update D] 3s -  16.00% iterations (6.806e-05)    [PROGRESS:Update D] 4s -  17.00% iterations (1.798e-06)    [INFO:Update D]: 18 iterations
    [DEBUG:DICODILE] Objective (d) : 3.245e+04  (11s)
    [INFO:DICOD-9] converged in 53.756s (39.297s) with 1349458 iterations (140274 updates).
    [INFO:DICODILE] Finished in 687s
    [DICOD] final cost : [115793.69054978853, 32716.327712952007, 32567.10873538484, 32503.037046402937, 32484.756728089218, 32457.529763006394, 32450.142994077713, 32433.868090317934]




.. GENERATED FROM PYTHON SOURCE LINES 71-73

Plot and compare the initial dictionary `D_init` with the
dictionary `D_hat` improved by `dicodile`.

.. GENERATED FROM PYTHON SOURCE LINES 73-81

.. code-block:: default


    # normalize dictionaries
    normalized_D_init = D_init / D_init.max()
    normalized_D_hat = D_hat / D_hat.max()

    display_dictionaries(normalized_D_init, normalized_D_hat)





.. image-sg:: /auto_examples/images/sphx_glr_plot_mandrill_002.png
   :alt: plot mandrill
   :srcset: /auto_examples/images/sphx_glr_plot_mandrill_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 50 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 82-83

Reconstruct the image from `z_hat` and `D_hat`.

.. GENERATED FROM PYTHON SOURCE LINES 83-88

.. code-block:: default


    X_hat = reconstruct(z_hat, D_hat)
    X_hat = np.clip(X_hat, 0, 1)









.. GENERATED FROM PYTHON SOURCE LINES 89-90

Plot the reconstructed image.

.. GENERATED FROM PYTHON SOURCE LINES 90-97

.. code-block:: default


    fig = plt.figure("recovery")

    ax = plt.subplot()
    ax.imshow(X_hat.swapaxes(0, 2))
    ax.axis('off')
    plt.tight_layout()



.. image-sg:: /auto_examples/images/sphx_glr_plot_mandrill_003.png
   :alt: plot mandrill
   :srcset: /auto_examples/images/sphx_glr_plot_mandrill_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 12 minutes  52.926 seconds)


.. _sphx_glr_download_auto_examples_plot_mandrill.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_mandrill.py <plot_mandrill.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_mandrill.ipynb <plot_mandrill.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
